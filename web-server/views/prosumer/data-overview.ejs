<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Prosumer Data Overview</title>
    <%- include('../partials/bootstrap-css') %>
    <link rel="stylesheet" type="text/css" href="/css/global.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.js"></script>
  </head>

  <body>

    <div class="jumbotron text-center">
        <h1>Overview</h1>
    </div>

    <div class="container text-center">
        <div class="row">
            <div class="col-md">
                <h3>Prosumer Data</h3>
                <canvas id="prosumerChart" width="150" height="100"></canvas>
                <p id="prosumer_consumption"></p>
                <p id="prosumer_production"></p>
                <p id="prosumer_net_consumption"></p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-6">
                <h3>Electricity Price</h3>
                <canvas id="electricityPricesChart" width="150" height="100"></canvas>
                <p id="electricity_price"></p>
            </div>
            <div class="col-sm-6">
                <h3>Wind speed</h3>
                <canvas id="windSpeedChart" width="150" height="100"></canvas>
                <p id="wind_speed"></p>
            </div>
        </div>
    </div>

  </body>
</html>

<script>

    var maxPoints = 30;
    var maxCount = 20;

    /**
     *  Adds new label and value to chart.
     */
    async function addData(chartData, newLabel, newData) {
        chartData.labels.push(newLabel);
        chartData.value.push(newData);
        if (chartData.labels.length > chartData.maxPoints) {
            chartData.labels.shift();
            chartData.value.shift();
        }
        chartData.chart.update();
    }


    /**
     *  Defines the wind speed chart and the variables needed.
     */
    var windSpeedChartData = {};
    windSpeedChartData.maxPoints = maxPoints;
    windSpeedChartData.counterMax = maxCount;
    windSpeedChartData.counter = windSpeedChartData.counterMax;
    windSpeedChartData.labels = [];
    windSpeedChartData.value = [];
    windSpeedChartData.chart = new Chart(document.getElementById('windSpeedChart').getContext('2d'), {
        type: 'line',
        data: {
            labels: windSpeedChartData.labels ,
            datasets: [{
                label: 'Wind Speed',
                data: windSpeedChartData.value,
                backgroundColor: 'rgba(0, 0, 255, 0.2)',
                borderColor: 'rgba(0, 0, 255, 1)',
                borderWidth: 1
            }]
        }
    });


    /**
     *  Retrieves the wind speed and updates the wind chart and value.
     */
    getWindSpeed = async function() {
        const response = await fetch('http://localhost:3000/simulator/wind');
        const windData = await response.json();
        document.getElementById("wind_speed").innerHTML = windData.wind_speed.toFixed(3) + " " + windData.unit;
        if (windSpeedChartData.counter >= windSpeedChartData.counterMax) {
            addData(windSpeedChartData, windData.hour, windData.wind_speed);
            windSpeedChartData.counter = 0;
        } else {
            windSpeedChartData.counter += 1;
        }
    }


    /**
     *  Defines the prosumer data chart and the variables needed.
     */
    var prosumerChartData = {};
    prosumerChartData.maxPoints = maxPoints * 2;
    prosumerChartData.counterMax = maxCount;
    prosumerChartData.counter = prosumerChartData.counterMax;
    prosumerChartData.labels = [];
    prosumerChartData.value = [];
    prosumerChartData.consumption = [];
    prosumerChartData.production = [];
    prosumerChartData.chart = new Chart(document.getElementById('prosumerChart').getContext('2d'), {
        type: 'line',
        data: {
            labels: prosumerChartData.labels,
            datasets: [{
                label: 'Net Electricity Consumption',
                data: prosumerChartData.value,
                backgroundColor: 'rgba(0, 0, 255, 0.2)',
                borderColor: 'rgba(0, 0, 255, 1)',
                borderWidth: 1,
                fill: false
            }, {
                label: 'Electricity consumption',
                data: prosumerChartData.consumption,
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                borderColor: 'rgba(255, 0, 0, 1)',
                borderWidth: 1,
                fill: false
            }, {
                label: 'Electricity production',
                data: prosumerChartData.production,
                backgroundColor: 'rgba(0, 255, 0, 0.2)',
                borderColor: 'rgba(0, 255, 0, 1)',
                borderWidth: 1,
                fill: false
            }]
        }
    });


    /**
     *  Retrieves the prosumer data and updates the prosumer chart and values.
     */
    getProsumerData = async function(id) {
        const response = await fetch(`http://localhost:3000/simulator/prosumer/${id}`);
        const prosumerData = await response.json();
        prosumerData.net = prosumerData.consumption - prosumerData.production;

        document.getElementById("prosumer_consumption").innerHTML = "Consumption: " +
            prosumerData.consumption.toFixed(3) + " " + prosumerData.unit;
        document.getElementById("prosumer_production").innerHTML = "Production: " +
            prosumerData.production.toFixed(3) + " " + prosumerData.unit;
        document.getElementById("prosumer_net_consumption").innerHTML = "Net Consumption: " +
            (prosumerData.net).toFixed(3) + " " + prosumerData.unit;
        if (prosumerChartData.counter >= prosumerChartData.counterMax) {
            prosumerChartData.consumption.push(prosumerData.consumption);
            prosumerChartData.production.push(prosumerData.production);
            if (prosumerChartData.consumption.length > prosumerChartData.maxPoints) {
                prosumerChartData.consumption.shift();
                prosumerChartData.production.shift();
            }
            addData(prosumerChartData, prosumerData.hour, prosumerData.net);
            prosumerChartData.counter = 0;
        } else {
            prosumerChartData.counter += 1;
        }
    }


    /**
     *  Defines the electricity price chart and the variables needed.
     */
    var electricityPriceChartData = {};
    electricityPriceChartData.maxPoints = maxPoints;
    electricityPriceChartData.counterMax = maxCount;
    electricityPriceChartData.counter = electricityPriceChartData.counterMax;
    electricityPriceChartData.labels = [];
    electricityPriceChartData.value = [];
    electricityPriceChartData.chart = new Chart(document.getElementById('electricityPricesChart').getContext('2d'), {
        type: 'line',
        data: {
            labels: electricityPriceChartData.labels,
            datasets: [{
                label: 'Electricity Price',
                data: electricityPriceChartData.value,
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                borderColor: 'rgba(255, 0, 0, 1)',
                borderWidth: 1
            }]
        }
    });


    /**
     *  Retrieves the electricity price and updates the price chart and value.
     */
    getElectricityPrice = async function() {
        const response = await fetch('http://localhost:3000/simulator/electricity/price');
        const priceData = await response.json();
        
        document.getElementById("electricity_price").innerHTML = priceData.electricity_price.toFixed(3) + " " + priceData.unit;
        if (electricityPriceChartData.counter >= electricityPriceChartData.counterMax) {
            addData(electricityPriceChartData, priceData.hour, priceData.electricity_price);
            electricityPriceChartData.counter = 0;
        } else {
            electricityPriceChartData.counter += 1;
        }
    }


    /**
     *  Calls functions that update the values on screen at a frequency of 0.1 Hz
     */
    setInterval(async function() {
        getWindSpeed();
        getProsumerData(0); // Need to get the signed in prosumers id and use that instead of 0.
        getElectricityPrice();
    }, 100);

</script>
        